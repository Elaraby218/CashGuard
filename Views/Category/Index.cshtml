@model ThreeFriends.Models.Category
@{
    ViewBag.Title = "Create Category";
    var iconList = ViewBag.IconList as IEnumerable<SelectListItem>;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/CategoryCards.css">
    <title>Modern Gradient Category Cards</title>

    <style>
        @@import url(https://fonts.googleapis.com/css?family=Raleway:400,300,500,700);


        .cards-container {
            width: 1100px;
            max-height: 950px; /* Adjust the height as needed */
            height: 100vh;
            padding: 20px;
            box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
            border-radius: 20px;
            position: fixed; /* Position fixed to keep it fixed on the screen */
            top: 50%; /* Adjust the top position */
            right: 0; /* Position it to the most right */
            margin-right: 20px; /* Adjust the margin-right as needed */
            transform: translateY(-50%); /* Center vertically */
            overflow-y: scroll; /* Use "scroll" instead of "auto" */
            scrollbar-width: none; /* Hide the scrollbar for Firefox */
            overflow-x: auto; /* Enable horizontal scrolling */
            display: flex; /* Use flexbox */
            flex-wrap: wrap; /* Allow items to wrap to next row */
            justify-content: space-between; /* Space between cards */
        }

            .cards-container::-webkit-scrollbar {
                display: none; /* Hide the scrollbar for Chrome/Safari */
            }

        .cardss-container {
            width: 650px;
            max-height: 950px; /* Adjust the height as needed */
            height: 100vh;
            padding: 20px;
            box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
            border-radius: 40px;
            position: fixed; /* Position fixed to keep it fixed on the screen */
            top: 50%; /* Adjust the top position */
            left: 100px; /* Position it to the most right */

            transform: translateY(-50%); /* Center vertically */
            overflow-y: scroll; /* Use "scroll" instead of "auto" */
            scrollbar-width: none; /* Hide the scrollbar for Firefox */
        }

            .cardss-container::-webkit-scrollbar {
                display: none; /* Hide the scrollbar for Chrome/Safari */
            }
        /* Custom CSS for create category view */
        .cardss-container {
            max-width: 900px; /* Increased width */
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #f9f9f9;
            text-align: center;
        }

            .cardss-container h2 {
                margin-top: 0;
                margin-bottom: 20px;
                font-size: 24px;
                color: #333;
            }

        .form-group {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

            .form-group label {
                flex: 1;
                text-align: left;
                margin-right: 10px;
                font-weight: bold;
                color: #333;
            }

        .form-control {
            flex: 2;
            width: 100%;
            padding: 8px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .btn-create {
            padding: 15px 30px; /* Increased padding for larger button */
            font-size: 20px; /* Increased font size */
            border-radius: 8px; /* Increased border radius */
            background-color: #007bff;
            color: #fff;
            border: none;
            margin-top: 600px; /* Added margin to separate from other elements */
        }

        .dropdown {
            position: relative;
            display: inline-block;
            
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f6f6f6;
            width: max-content;
            max-height: 400px; /* Set maximum height */
            overflow-y: auto; /* Enable vertical scrolling */
            border: 1px solid #ddd;
            text-align: left; /* Align options to the left */
        }

            .dropdown-content input[type="text"] {
                box-sizing: border-box;
                width: 100%;
                padding: 10px 20px;
                font-size: 16px; /* Increase font size for better visibility */
                border: none;
                border-bottom: 1px solid #ddd;
                background-image: url('searchicon.png');
                background-position: 10px 10px;
                background-repeat: no-repeat;
            }

            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

                .dropdown-content a img {
                    width: 24px;
                    height: 24px;
                    margin-right: 10px;
                }

                .dropdown-content a:hover {
                    background-color: #ddd;
                }

        .show {
            display: block;
        }

        .dropdown-content input[type="text"] {
            position: sticky;
            top: 0;
            z-index: 1;
            background-color: #f6f6f6;
        }

        .dropdown button {
            display: inline-flex; /* Make button inline with its content */
            align-items: center; /* Align items vertically */
            justify-content: center; /* Align content horizontally */
            width: 405px;
           
            padding: 5px;
            margin-left: 50px;

        }

        .error-message {
            color: red;
            /* Add any other styles for the error message */
        }
    </style>
</head>
<body>
    <div class="cards-container">
        <!-- Category Card -->
        @foreach (var category in ViewBag.CurUserCategories)
        {
            <div class="card">
                <img src="~/icons/@category.Icon" alt="Category">
                <div class="category-name">@category.Name</div>
                <div class="description">@category.Description</div>
                <div class="actions">
                    <button class="btn btn-primary btn-sm" onclick="location.href='@Url.Action("Edit", new { id = category.Id })'">Edit</button>
                    <button class="btn btn-info btn-sm" onclick="location.href='@Url.Action("Details", new { id = category.Id })'">Details</button>
                    <button class="btn btn-danger btn-sm" onclick="if(confirm('Are you sure you want to delete this category?')) location.href='@Url.Action("Delete", new { id = category.Id })'">Delete</button>
                </div>
            </div>
        }
    </div>



    <div class="cardss-container">
            <h2>@ViewBag.Title</h2>

        <form action="/Category/Create" method="post">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label for="Name">Category Name:</label>
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = "Enter category name" })
                @Html.ValidationMessageFor(model => model.Name , "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                <label for="Description">Category Description:</label>
                @Html.TextBoxFor(model => model.Description, new { @class = "form-control", placeholder = "Enter category description" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "error-message" })
            </div>

            <div class="form-group">
                <label for="Icon">Select Icon:</label>
                <div class="dropdown">
                    <button onclick="myFunction()" class="dropbtn btn btn-primary" id="selectedOption" type="button">
                        @if (iconList != null && iconList.Any())
                        {
                            var firstIcon = iconList.First();
                            <img src="~/icons/@firstIcon.Value" alt="@firstIcon.Text" width="24" height="24">
                            <span>@firstIcon.Text</span>
                        }
                        else
                        {
                            <span>Select an Icon</span>
                        }
                    </button>
                    <div id="myDropdown" class="dropdown-content">
                        <input type="text" placeholder="Search.." id="myInput" onkeyup="filterFunction()">
                        @foreach (var icon in iconList)
                        {
                            <a href="#" onclick="selectOption('@icon.Value', '@icon.Text')">
                                <img src="~/icons/@icon.Value" alt="@icon.Text" width="24" height="24">
                                @icon.Text
                            </a>
                        }
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.Icon , "", new { @class = "error-message" })
                @Html.HiddenFor(model => model.Icon) <!-- Hidden input to store the selected icon value -->
            </div>

            <button type="submit" class="btn btn-create">Create</button>
        </form>
        </div>

        <script>
            function myFunction() {
                document.getElementById("myDropdown").classList.toggle("show");
            }

            function filterFunction() {
                const input = document.getElementById("myInput");
                const filter = input.value.toUpperCase();
                const div = document.getElementById("myDropdown");
                const a = div.getElementsByTagName("a");
                for (let i = 0; i < a.length; i++) {
                    txtValue = a[i].textContent || a[i].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        a[i].style.display = "";
                    } else {
                        a[i].style.display = "none";
                    }
                }
            }

            function selectOption(value, text) {
                document.getElementById("selectedOption").innerHTML = '<img src="/icons/' + value + '" alt="' + text + '" width="24" height="24"> ' + text;
                document.getElementById("Icon").value = value;
                document.getElementById("myDropdown").classList.remove("show");
            }
        </script>

</body>
</html>
